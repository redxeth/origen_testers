// ***************************************************************************
// GENERATED:
//   Time:    31-Jul-2017 13:15PM
//   By:      Daniel Hadad
//   Command: origen g subroutines -t dut.rb -e uflex.rb
// ***************************************************************************
// ENVIRONMENT:
//   Application
//     Source:    git@github.com:Origen-SDK/origen_testers.git
//     Version:   0.9.6
//     Branch:    match2_keepalive_updates(2862c9d5383) (+local edits)
//   Origen
//     Source:    https://github.com/Origen-SDK/origen
//     Version:   0.7.46
//   Plugins
//     atp:                      0.5.4
//     origen_arm_debug:         0.4.3
//     origen_doc_helpers:       0.4.4
//     origen_jtag:              0.13.0
//     origen_swd:               0.5.0
// ***************************************************************************
import tset tp0;                                                                                
opcode_mode = single;                                                                           
digital_inst = hsdm;                                                                            
compressed = yes;                                                                               
instruments = {                                                                                 
               VDDHV:DCVS;                                                                      
               VDDLV:DCVS;                                                                      
               tdi:digsrc 1:msb:parallel:format=binary:unique_sites:auto_cond_disable;                               
               tms:digsrc 1:msb:parallel:format=binary:unique_sites:auto_cond_disable;                               
               tdo:digcap 8:lsb:serial:format=twos_complement:data_type=default:auto_cond_disable:auto_trig_disable:store_stv_disable:store_stv_disable;                               
               mto;                                                                             
}                                                                                               
                                                                                                
srm_vector                                                                                      
subroutines ($tset, tclk, tdi, tdo, tms)                                                        
{                                                                                               
//                                                                                              t t t t
//                                                                                              c d d m
//                                                                                              l i o s
//                                                                                              k      
global subr executefunc1:                                                                       
return                                                           > tp0                          X X X X ;
                                                                 > tp0                          X X X X ;
global subr match_pin:                                                                          
                                                                 > tp0                          X X X X ;
// Wait for a maximum of 5.0us
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          X X X X ;
set c15 101                                                      > tp0                          X X X X ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          X X X X ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          X X X X ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          X X X X ;
loop_here_0: if (branch_expr) jump loop_here_0                   > tp0                          X X X X ;
// Start the match loop
set_msb 1                                                        > tp0                          X X X X ;
branch_expr = (fail)                                             > tp0                          X X X X ;
global match_loop_1:                                                                            
set c0 1                                                         > tp0                          X X X X ;
match_result_loop_1:                                                                            
loop c0                                                          > tp0                          X X X X ;
// Check if tdo is high
 mask                                                            > tp0                          X X H X ;
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          X X X X ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_1                   > tp0                          X X X X ;
// Match found
pop_loop                                                         > tp0                          X X X X ;
jump match_loop_end_1                                            > tp0                          X X X X ;
// Match not yet found
block_0_notyet_matched_1:                                        > tp0                          X X X X ;
// Match loop cycle count = 260
end_loop match_result_loop_1                                     > tp0                          X X X X ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          X X X X ;
// Check if tdo is high
                                                                 > tp0                          X X H X ;
jump match_loop_end_1                                            > tp0                          X X X X ;
match_loop_end_1:                                                > tp0                          X X X X ;
return                                                           > tp0                          X X X X ;
                                                                 > tp0                          X X X X ;
global subr match_2pins:                                                                        
                                                                 > tp0                          X X X X ;
// Wait for a maximum of 5.0us
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          X X X X ;
set c15 101                                                      > tp0                          X X X X ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          X X X X ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          X X X X ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          X X X X ;
loop_here_2: if (branch_expr) jump loop_here_2                   > tp0                          X X X X ;
// Start the match loop
set_msb 1                                                        > tp0                          X X X X ;
branch_expr = (fail)                                             > tp0                          X X X X ;
global match_loop_3:                                                                            
set c0 1                                                         > tp0                          X X X X ;
match_result_loop_3:                                                                            
loop c0                                                          > tp0                          X X X X ;
// Check if tdo is high
 mask                                                            > tp0                          X X H X ;
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          X X X X ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_3                   > tp0                          X X X X ;
// Match found
pop_loop                                                         > tp0                          X X X X ;
jump match_loop_end_3                                            > tp0                          X X X X ;
// Match not yet found
block_0_notyet_matched_3:                                        > tp0                          X X X X ;
// Check if tms is high
 mask                                                            > tp0                          X X L H ;
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          X X X X ;
// Branch if block condition 1 not yet met
if (branch_expr) jump block_1_notyet_matched_3                   > tp0                          X X X X ;
// Match found
pop_loop                                                         > tp0                          X X X X ;
jump match_loop_end_3                                            > tp0                          X X X X ;
// Match not yet found
block_1_notyet_matched_3:                                        > tp0                          X X X X ;
// Match loop cycle count = 520
end_loop match_result_loop_3                                     > tp0                          X X X X ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          X X X X ;
// Check if tdo is high
// Check if tms is high
                                                                 > tp0                          X X H H ;
jump match_loop_end_3                                            > tp0                          X X X X ;
match_loop_end_3:                                                > tp0                          X X X X ;
return                                                           > tp0                          X X X X ;
                                                                 > tp0                          X X X X ;
global subr match_done:                                                                         
                                                                 > tp0                          X X X X ;
// Wait for a maximum of 5.0us
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          X X X X ;
set c15 101                                                      > tp0                          X X X X ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          X X X X ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          X X X X ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          X X X X ;
loop_here_4: if (branch_expr) jump loop_here_4                   > tp0                          X X X X ;
// Start the match loop
set_msb 1                                                        > tp0                          X X X X ;
branch_expr = (fail)                                             > tp0                          X X X X ;
global match_loop_5:                                                                            
set c0 1                                                         > tp0                          X X X X ;
match_result_loop_5:                                                                            
loop c0                                                          > tp0                          X X X X ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 0 ;
 mask                                                            > tp0                          0 X X 0 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 1 ;
 mask                                                            > tp0                          0 X X 0 ;
 mask                                                            > tp0                          0 X X 0 ;
// [JTAG] Write IR: 0xB
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 1 ;
// [JTAG] /Write IR: 0xB
 mask                                                            > tp0                          0 1 X 1 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 1 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
// [JTAG] Write DR: 0x1
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x1
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 7                                                         > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write IR: 0xA
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 1 ;
// [JTAG] /Write IR: 0xA
 mask                                                            > tp0                          0 1 X 1 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 1 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
// [JTAG] Write DR: 0x7
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x7
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 7                                                         > tp0                          0 0 X 0 ;
// JTAG-DP: R-32: name='RDBUFF'
// JTAG-AP: R-32: addr=0x00000000
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write IR: 0xB
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 1 ;
// [JTAG] /Write IR: 0xB
 mask                                                            > tp0                          0 1 X 1 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 1 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
// [JTAG] Write DR: 0x118000210
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x118000210
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x00000000, data=0x23000042
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x3D2
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x3D2
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x00000004, data=0x0000007a
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_5                   > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump match_loop_end_5                                            > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_5:                                        > tp0                          0 0 X 0 ;
// Match loop cycle count = 556
end_loop match_result_loop_5                                     > tp0                          0 0 X 0 ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
repeat 2                                                         > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
                                                                 > tp0                          0 0 X 0 ;
repeat 2                                                         > tp0                          0 1 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 1 X 0 ;
repeat 29                                                        > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
                                                                 > tp0                          0 0 X 1 ;
repeat 16                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
jump match_loop_end_5                                            > tp0                          0 0 X 0 ;
match_loop_end_5:                                                > tp0                          0 0 X 0 ;
return                                                           > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
global subr match_done2:                                                                        
                                                                 > tp0                          0 0 X 0 ;
// Wait for a maximum of 7.0ms
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 101                                                      > tp0                          0 0 X 0 ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          0 0 X 0 ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          0 0 X 0 ;
loop_here_6: if (branch_expr) jump loop_here_6                   > tp0                          0 0 X 0 ;
// Start the match loop
set_msb 1                                                        > tp0                          0 0 X 0 ;
branch_expr = (fail)                                             > tp0                          0 0 X 0 ;
global match_loop_7:                                                                            
set c0 372                                                       > tp0                          0 0 X 0 ;
match_result_loop_7:                                                                            
loop c0                                                          > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_7                   > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump match_loop_end_7                                            > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_7:                                        > tp0                          0 0 X 0 ;
// Match loop cycle count = 314
end_loop match_result_loop_7                                     > tp0                          0 0 X 0 ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
repeat 2                                                         > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
                                                                 > tp0                          0 0 X 0 ;
repeat 2                                                         > tp0                          0 1 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 1 X 0 ;
repeat 29                                                        > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
                                                                 > tp0                          0 0 X 1 ;
repeat 16                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
jump match_loop_end_7                                            > tp0                          0 0 X 0 ;
match_loop_end_7:                                                > tp0                          0 0 X 0 ;
return                                                           > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
global subr match_done3:                                                                        
                                                                 > tp0                          0 0 X 0 ;
// Wait for a maximum of 7.00s
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 101                                                      > tp0                          0 0 X 0 ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          0 0 X 0 ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          0 0 X 0 ;
loop_here_8: if (branch_expr) jump loop_here_8                   > tp0                          0 0 X 0 ;
// Start the match loop
set_msb 371550                                                   > tp0                          0 0 X 0 ;
branch_expr = (fail)                                             > tp0                          0 0 X 0 ;
global match_loop_9:                                                                            
set c0 43870                                                     > tp0                          0 0 X 0 ;
match_result_loop_9:                                                                            
loop c0                                                          > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_9                   > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump match_loop_end_9                                            > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_9:                                        > tp0                          0 0 X 0 ;
// Match loop cycle count = 314
end_loop match_result_loop_9                                     > tp0                          0 0 X 0 ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
repeat 2                                                         > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
                                                                 > tp0                          0 0 X 0 ;
repeat 2                                                         > tp0                          0 1 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 1 X 0 ;
repeat 29                                                        > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
                                                                 > tp0                          0 0 X 1 ;
repeat 16                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
jump match_loop_end_9                                            > tp0                          0 0 X 0 ;
match_loop_end_9:                                                > tp0                          0 0 X 0 ;
return                                                           > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
global subr match_done4:                                                                        
                                                                 > tp0                          0 0 X 0 ;
// Wait for a maximum of 72.00s
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 101                                                      > tp0                          0 0 X 0 ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          0 0 X 0 ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          0 0 X 0 ;
loop_here_10: if (branch_expr) jump loop_here_10                 > tp0                          0 0 X 0 ;
// Start the match loop
set_msb 3821657                                                  > tp0                          0 0 X 0 ;
branch_expr = (fail)                                             > tp0                          0 0 X 0 ;
global match_loop_11:                                                                           
set c0 20569                                                     > tp0                          0 0 X 0 ;
match_result_loop_11:                                                                           
loop c0                                                          > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_11                  > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump match_loop_end_11                                           > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_11:                                       > tp0                          0 0 X 0 ;
// Match loop cycle count = 314
end_loop match_result_loop_11                                    > tp0                          0 0 X 0 ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
repeat 2                                                         > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
                                                                 > tp0                          0 0 X 0 ;
repeat 2                                                         > tp0                          0 1 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 1 X 0 ;
repeat 29                                                        > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
                                                                 > tp0                          0 0 X 1 ;
repeat 16                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
jump match_loop_end_11                                           > tp0                          0 0 X 0 ;
match_loop_end_11:                                               > tp0                          0 0 X 0 ;
return                                                           > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
global subr match_done5:                                                                        
                                                                 > tp0                          0 0 X 0 ;
// Wait for a maximum of 7000.00s
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 101                                                      > tp0                          0 0 X 0 ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          0 0 X 0 ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          0 0 X 0 ;
loop_here_12: if (branch_expr) jump loop_here_12                 > tp0                          0 0 X 0 ;
// Start the match loop
set_msb 185774947                                                > tp0                          0 0 X 0 ;
branch_expr = (fail)                                             > tp0                          0 0 X 0 ;
global match_loop_13:                                                                           
set c0 45923                                                     > tp0                          0 0 X 0 ;
match_result_loop_13:                                                                           
loop c0                                                          > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 1 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 0 ;
 mask                                                            > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
 mask                                                            > tp0                          0 0 X 1 ;
 mask                                                            > tp0                          0 0 X 0 ;
repeat 15                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_13                  > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump match_loop_end_13                                           > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_13:                                       > tp0                          0 0 X 0 ;
// Match loop cycle count = 314
// Delay to meet timeout value
repeat 2                                                         > tp0                          0 0 X 0 ;
end_loop match_result_loop_13                                    > tp0                          0 0 X 0 ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
repeat 2                                                         > tp0                          0 0 X 0 ;
// [JTAG] Write DR: 0x16
                                                                 > tp0                          0 0 X 0 ;
repeat 2                                                         > tp0                          0 1 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 1 X 0 ;
repeat 29                                                        > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 1 ;
// [JTAG] /Write DR: 0x16
                                                                 > tp0                          0 0 X 1 ;
repeat 16                                                        > tp0                          0 0 X 0 ;
// JTAG-AP: W-32: addr=0x0000000c, data=0x00000002
// MEM-AP(default): WR-32: addr=0x0000007a, data=0x00000002
jump match_loop_end_13                                           > tp0                          0 0 X 0 ;
match_loop_end_13:                                               > tp0                          0 0 X 0 ;
return                                                           > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
global subr match_done6:                                                                        
                                                                 > tp0                          0 0 X 0 ;
// Wait for a maximum of 15.00s
global subr match_done_0:                                                                       
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 101                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_1:                                                                       
//  Using counter c15 as set_code replacement - value set to 101 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 102                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_2:                                                                       
//  Using counter c15 as set_code replacement - value set to 102 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 103                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_3:                                                                       
//  Using counter c15 as set_code replacement - value set to 103 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 104                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_4:                                                                       
//  Using counter c15 as set_code replacement - value set to 104 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 105                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_5:                                                                       
//  Using counter c15 as set_code replacement - value set to 105 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 106                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_6:                                                                       
//  Using counter c15 as set_code replacement - value set to 106 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 107                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_7:                                                                       
//  Using counter c15 as set_code replacement - value set to 107 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 108                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_8:                                                                       
//  Using counter c15 as set_code replacement - value set to 108 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 109                                                      > tp0                          0 0 X 0 ;
jump call_tester                                                 > tp0                          0 0 X 0 ;
global subr match_done_9:                                                                       
//  Using counter c15 as set_code replacement - value set to 109 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 110                                                      > tp0                          0 0 X 0 ;
call_tester:                                                                                    
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          0 0 X 0 ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          0 0 X 0 ;
loop_here_14: if (branch_expr) jump loop_here_14                 > tp0                          0 0 X 0 ;
// Start the match loop
set_msb 961539                                                   > tp0                          0 0 X 0 ;
branch_expr = (fail)                                             > tp0                          0 0 X 0 ;
global match_loop_15:                                                                           
set c0 44035                                                     > tp0                          0 0 X 0 ;
match_result_loop_15:                                                                           
loop c0                                                          > tp0                          0 0 X 0 ;
// Check if tdo is high
 mask                                                            > tp0                          0 0 H 0 ;
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_15                  > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump match_loop_end_15                                           > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_15:                                       > tp0                          0 0 X 0 ;
// Match loop cycle count = 260
end_loop match_result_loop_15                                    > tp0                          0 0 X 0 ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Check if tdo is high
                                                                 > tp0                          0 0 H 0 ;
jump match_loop_end_15                                           > tp0                          0 0 X 0 ;
match_loop_end_15:                                               > tp0                          0 0 X 0 ;
return                                                           > tp0                          0 0 X 0 ;
                                                                 > tp0                          0 0 X 0 ;
global subr match_2pins_custom_jump:                                                            
                                                                 > tp0                          0 0 X 0 ;
// Wait for a maximum of 5.0us
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X 0 ;
set c15 101                                                      > tp0                          0 0 X 0 ;
// Wait for any prior failures to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Now handshake with the tester to bin out and parts that have failed before they got here
branch_expr = (cpuB_cond)                                        > tp0                          0 0 X 0 ;
set_cpu_cond (cpuA_cond cpuB_cond)                               > tp0                          0 0 X 0 ;
loop_here_16: if (branch_expr) jump loop_here_16                 > tp0                          0 0 X 0 ;
// Start the match loop
set_msb 1                                                        > tp0                          0 0 X 0 ;
branch_expr = (fail)                                             > tp0                          0 0 X 0 ;
global match_loop_17:                                                                           
set c0 1                                                         > tp0                          0 0 X 0 ;
match_result_loop_17:                                                                           
loop c0                                                          > tp0                          0 0 X 0 ;
// Check if tdo is high
 mask                                                            > tp0                          0 0 H 0 ;
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X 0 ;
// Branch if block condition 0 not yet met
if (branch_expr) jump block_0_notyet_matched_17                  > tp0                          0 0 X 0 ;
// Match found
pop_loop                                                         > tp0                          0 0 X 0 ;
jump no_fails_found                                              > tp0                          0 0 X 0 ;
// Match not yet found
block_0_notyet_matched_17:                                       > tp0                          0 0 X 0 ;
// Check if tms is high
 mask                                                            > tp0                          0 0 L H ;
//  Wait for the result to propagate through the pipeline
pipe_minus 1                                                     > tp0                          0 0 X X ;
// Branch if block condition 1 not yet met
if (branch_expr) jump block_1_notyet_matched_17                  > tp0                          0 0 X X ;
// Match found
pop_loop                                                         > tp0                          0 0 X X ;
jump match_loop_end_17                                           > tp0                          0 0 X X ;
// Match not yet found
block_1_notyet_matched_17:                                       > tp0                          0 0 X X ;
// Match loop cycle count = 520
end_loop match_result_loop_17                                    > tp0                          0 0 X X ;
// To get here something has gone wrong, check blocks again to force a pattern failure
pipe_minus 1                                                     > tp0                          0 0 X X ;
// Check if tdo is high
// Check if tms is high
                                                                 > tp0                          0 0 H H ;
jump no_fails_found                                              > tp0                          0 0 X X ;
match_loop_end_17:                                               > tp0                          0 0 X X ;
                                                                 > tp0                          0 0 X X ;
//  Using counter c15 as set_code replacement - value set to 200 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X X ;
set c15 201                                                      > tp0                          0 0 X X ;
jump match_done                                                  > tp0                          0 0 X X ;
no_fails_found:                                                                                 
//  Using counter c15 as set_code replacement - value set to 201 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X X ;
set c15 202                                                      > tp0                          0 0 X X ;
match_done:                                                                                     
return                                                           > tp0                          0 0 X X ;
                                                                 > tp0                          0 0 X X ;
global subr handshake:                                                                          
//  Using counter c15 as set_code replacement - value set to 100 + 1
set_msb 1                                                                                       
                                                                 > tp0                          0 0 X X ;
set c15 101                                                      > tp0                          0 0 X X ;
branch_expr = (cpuA_cond)                                        > tp0                          0 0 X X ;
set_cpu_cond (cpuA_cond)                                         > tp0                          0 0 X X ;
loop_here_18: if (branch_expr) jump loop_here_18                 > tp0                          0 0 X X ;
repeat 2                                                         > tp0                          0 0 X X ;
return                                                           > tp0                          0 0 X X ;
global subr digsrc_overlay_testme32:                                                            
((tdi,tms):DigSrc = Start)                                                                      
repeat 145                                                       > tp0                          0 0 X X ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = Stop)                                                                       
return                                                           > tp0                          0 0 X 1 ;
global subr digsrc_overlay:                                                                     
((tdi,tms):DigSrc = Start)                                                                      
repeat 145                                                       > tp0                          0 0 X 1 ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = SEND)                                                                       
                                                                 > tp0                          0 D X D ;
((tdi,tms):DigSrc = Stop)                                                                       
return                                                           > tp0                          0 0 X 1 ;
keepalive subr keep_alive:                                                                      
clr_subr                                                         > tp0                          0 0 X 1 ;
branch_expr = (cpuD_cond)                                        > tp0                          0 0 X 1 ;
set_cpu_cond (cpuD_cond)                                         > tp0                          0 0 X 1 ;
loop_here_19: if (branch_expr) jump loop_here_19                 > tp0                          0 0 X 1 ;
return                                                           > tp0                          0 0 X 1 ;
                                                                 > tp0                          0 0 X 1 ;
}                                                                                               
srm_vector                                                                                      
overlaysub1_module ($tset, tclk, tdi, tdo, tms)                                                 
{                                                                                               
global subr overlaysub1:                                                                        
return                                                           > tp0                          0 0 X 1 ;
}                                                                                               
srm_vector                                                                                      
overlaysub2_module ($tset, tclk, tdi, tdo, tms)                                                 
{                                                                                               
global subr overlaysub2:                                                                        
return                                                           > tp0                          0 0 X 1 ;
}                                                                                               
srm_vector                                                                                      
overlaysub3_module ($tset, tclk, tdi, tdo, tms)                                                 
{                                                                                               
global subr overlaysub3:                                                                        
return                                                           > tp0                          0 0 X 1 ;
}                                                                                               
srm_vector                                                                                      
overlaysub4_module ($tset, tclk, tdi, tdo, tms)                                                 
{                                                                                               
global subr overlaysub4:                                                                        
return                                                           > tp0                          0 0 X 1 ;
}                                                                                               
// ######################################################################
// ## Pattern complete
// ######################################################################
