%#- LIMITS FILE
% test_modes = $tester.respond_to?(:limitfile_pims_events) ? $tester.limitfile_pims_events : [""]
%#-  *********************
%#-  **      HEADER     **
%#-  *********************
% line_arr = ["Suite name","Pins","Test name","Test number"]
% test_modes.each do |mode| # here repeat fields that are per test mode
%#- supposedly can add bin number by test_mode but haven't tried it yet
%   line_arr += ["Lsl","Lsl_typ","Usl_typ","Usl","Units"]
% end
% line_arr += ["Bin_s_num","Bin_s_name","Bin_h_num","Bin_h_name","Bin_type","Bin_reprobe","Bin_overon","Test_remarks"]
%#- print out the header line
<%= line_arr.map(&:inspect).join(',') %>
% unless test_modes == [""]
%#- print out extra test modes line only if real test modes exist
%   line_arr = ["Test mode", "", "", ""]
%   test_modes.each do |mode|
%     line_arr += ["#{mode}", "#{mode}", "#{mode}", "#{mode}", "#{mode}"]
%   end
%   line_arr += ["","","","","","","",""]
%#- print out the test modes line
<%= line_arr.map(&:inspect).join(',') %>
% end
%#-  *********************
%#- haven't yet figured out how to do program option below used for building programs
%#- program = options[:program]
%#-
%#- if program
%#-   program.testmethodlimits.each do |id, parameters|
%#-<%= id %>:
%#-     parameters.each do |key, val|
%#-  <%= key %> = <%= val %>
%#-     end
%#-  end
%#- else
%#-   Origen.interface.test_methods.collection.each do |method|
%#-     if method.respond_to?(:limits) && method.limits
%#- "<%= method.klass %>","pins","testname","testnumber","lsl","lsl_typ","usl_typ","usl","units"
%#-  <%= method.limits %>;
%#-     end
%#-   end
%#-
%#-  test_number = 0
%   Origen.interface.flow.test_suites.collection.each do |suite|
%     if suite.test_method.respond_to?(:limits) && suite.test_method.limits
%        method = suite.test_method
%        limits = method.limits
%        test_number = suite.test_number
%#- 
%#-      DETERMINE IF FUNCTIONAL OR NOT
%        limit_type = (limits.type == :parametric) ? :parametric : :functional
%#- 
%#-      GET BIN INFO
%        bin_num = suite.bin
%        sbin_num = suite.soft_bin
%#-      Fill in any nils if other bin type is available
%        if sbin_num.nil? && !bin_num.nil?
%          sbin_num = bin_num
%        elsif bin_num.nil? && !sbin_num.nil?
%          bin_num = sbin_num
%        end
%#-
%#-
%#- PARAMETRIC TESTS
%#-   test_name = name passed in from limit as parameter-name based (third column)
%#- if suite.name =~ /nvm_delta_lpb/ || suite.name =~ /bistcom/
%#-"DEBUG:  <%= suite.name %>;  limit_type: <%= limit_type %>; limits.type: <%= limits.type %>; limits.test_name: <%= limits.test_name %>"
%#- end
%#-
%#-
%#-      # PARAMETRIC TEST
%        if limit_type == :parametric # for parametric need 'test name', 'test number' and 'bin #s'.
%          test_name = limits.test_name == '' ? 'PARA_TEST_NAME' : limits.test_name
%#-        first the parametric limit for the parametric test
%          line_arr = []
%          line_arr.push("#{suite.name}")   # suite name
%          line_arr.push("")                # pins
%          line_arr.push("#{test_name}")    # test name
%          line_arr.push("#{test_number}")  # test number
%          test_modes.each do |mode| # here repeat fields that are per test mode
%            line_arr.push("#{limits.lo_limit}")  # lo_limit
%            line_arr.push("#{limits.lo_type}")   # lo_type
%            line_arr.push("#{limits.hi_type}")   # hi_type
%            line_arr.push("#{limits.hi_limit}")  # hi_limit
%            line_arr.push("#{limits.unit}")      # limit unit
%          end
%          line_arr.push("#{sbin_num}")     # soft bin num
%          line_arr.push("")                # soft bin name
%          line_arr.push("#{bin_num}")      # hard bin num
%          line_arr.push("")                # hard bin name
%          line_arr.push("")                # bin type
%          line_arr.push("")                # bin reprobe
%          line_arr.push("")                # bin_overon
%          line_arr.push("")                # test remarks
%#-        now print out the line
<%= line_arr.map(&:inspect).join(',') %>
%#-
%#-        now the functional limit for the parametric test
%          line_arr = []
%          line_arr.push("#{suite.name}")   # suite name
%          line_arr.push("")                # pins
%          line_arr.push("f_#{suite.name}") # test name
%          line_arr.push("#{test_number}")  # test number
%          test_modes.each do |mode| # here repeat fields that are per test mode
%            line_arr.push("1")                   # lo_limit
%            line_arr.push("#{limits.lo_type}")   # lo_type
%            line_arr.push("#{limits.hi_type}")   # hi_type
%            line_arr.push("1")                   # hi_limit
%            line_arr.push("")              # limit unit
%          end
%          line_arr.push("#{sbin_num}")     # soft bin num
%          line_arr.push("")                # soft bin name
%          line_arr.push("#{bin_num}")      # hard bin num
%          line_arr.push("")                # hard bin name
%          line_arr.push("")                # bin type
%          line_arr.push("")                # bin reprobe
%          line_arr.push("")                # bin_overon
%          line_arr.push("")                # test remarks
%#-        now print out the line
<%= line_arr.map(&:inspect).join(',') %>
%        end  # PARAMETRIC TEST
%#- 
%#- 
%#- FUNCTIONAL TESTS
%        if limit_type == :functional
%          test_name = limits.test_name
%          line_arr = []
%          line_arr.push("#{suite.name}")   # suite name
%          line_arr.push("")                # pins
%          line_arr.push("#{test_name}")    # test name
%          line_arr.push("#{test_number}")  # test number
%          test_modes.each do |mode| # here repeat fields that are per test mode
%            line_arr.push("1")                   # lo_limit
%            line_arr.push("#{limits.lo_type}")   # lo_type
%            line_arr.push("#{limits.hi_type}")   # hi_type
%            line_arr.push("1")                   # hi_limit
%            line_arr.push("")              # limit unit
%          end
%          line_arr.push("#{sbin_num}")     # soft bin num
%          line_arr.push("")                # soft bin name
%          line_arr.push("#{bin_num}")      # hard bin num
%          line_arr.push("")                # hard bin name
%          line_arr.push("")                # bin type
%          line_arr.push("")                # bin reprobe
%          line_arr.push("")                # bin_overon
%          line_arr.push("")                # test remarks
%#-        now print out the line
<%= line_arr.map(&:inspect).join(',') %>
%        end # FUNCTIONAL TEST
%     end
%   end
